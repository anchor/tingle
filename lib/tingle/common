#!/bin/bash

ABORTAG="[abort]"
ERRTAG="[error]"
WARNTAG="[warning]"
SYSLOGTAG="tingle"

export PATH=/usr/sbin:/usr/bin:/sbin:/bin

TINGLE_ROOT=
if [ "${TINGLE_PREFIX}" != "/usr" ]; then
    TINGLE_ROOT="${TINGLE_PREFIX}"
fi
UNIMPORTANT="${TINGLE_ROOT}/etc/tingle/unimportant-packages"
KILLSWITCH="${TINGLE_ROOT}/etc/tingle/noupdate"

BIGPTY="${TINGLE_PREFIX}/lib/tingle/bigpty"

exec 3>&1
exec 4>&2

set -E
trap handle_error ERR
trap handle_interrupt INT QUIT TERM

declare -a ignore_rvs

abort() {
    # We could pass -s to logger and let it do the echo out to stderr, 
    # but I don't want to pass ABORTAG and friends into syslog.  That's 
    # what syslog priorities are for.

    log_error "$@"
    echo "$ABORTAG" "$@" >&4
    exit_clean 2
}

error() {
    log_error "$@"
    echo "$ERRTAG" "$@" >&4
    exit_clean 1
}

warning() {
    log_warning "$@"
    debug "$WARNTAG" "$@"
}

debug() {
    if ! is_interactive ; then
        exec 2>/dev/null
    fi

    echo "$@" >&2

    exec 2>&4
}

buffer() {
    echo "$TMP_DIR/$(echo "$(date +%s)-$RANDOM" | sed "s/[ \t/-]//g")"
}

# For commands that return non-zero without actually failing.
do_ignore_derp() {
    # Since we can't reliably detect failures, assume stderr is useless.
    if ! is_interactive ; then
        exec 2>/dev/null
    fi

    "$@" || true

    exec 2>&4
}

do_or_die() {
    local b i old_opts rv suppress=no

    if ! is_interactive ; then
        b="$(buffer)"
        exec 2>"$b"
    fi
    old_opts="$-"
    set +e
    "$@"
    rv=$?
    if echo "$old_opts" | grep -q e; then
        set -e
    fi
    exec 2>&4
    if [ "$rv" -ne 0 ]; then
        if [ ! -z "$ignore_rvs" ]; then
            for (( i=0 ; i < ${#ignore_rvs[@]} ; i++ )); do
                if [ "$rv" -eq "${ignore_rvs[$i]}" ]; then
                    suppress=yes
                fi
            done
            ignore_rvs=( )
        fi
        if [ "$suppress" != "yes" ]; then
            if ! is_interactive ; then
                cat "$b" >&2
                echo >&2
            fi
            error "\`$*' returned non-zero"
        else
            return $rv
        fi
    fi
}

execd() {
    local b_err b_out d="$1" i rv

    if [ ! -d "$d" ] ; then
        warning "$d is not a valid hook scripts directory"
    else
        debug "Scanning $d for hook scripts"
        find -L "${d}" -mindepth 1 -maxdepth 1 -type f | while read i; do
            if [ -x "$i" ]; then
                debug "Executing $i"
                if ! is_interactive ; then
                    b_out="$(buffer)"
                    b_err="$(buffer)"
                    exec 1>"$b_out"
                    exec 2>"$b_err"
                fi
                set +e
                "$i"
                rv=$?
                set -e
                exec 1>&3
                exec 2>&4
                if [ $rv -ne 0 ]; then
                    if ! is_interactive ; then
                        cat "$b_out" >&1
                        cat "$b_err" >&2
                        echo >&2
                    fi
                    error "\`$i' returned non-zero"
                fi
            else
                warning "$i is not executable"
            fi
        done
    fi
}

exit_clean() {
    local STATUS

    STATUS=0
    [ -n "$1" ] && STATUS="$1"
    nuke_tmp
    exit "$STATUS"
}

handle_error() {
    local rv=$?

    # A trap set on ERR is still hot even when set -e is not in effect.  
    # I don't really care about failures outside of set -e sections.
    if echo "$-" | grep -q e; then
        exit_clean "$rv"
    fi
}

handle_interrupt() {
    exit_clean 1
}

invoke_os_flavour() {
    local BASE="$1" FLAVA SUFFIX old_opts rv

    case "$(os_flavour)" in
        CentOS|RedHat)
            SUFFIX="rpm"
        ;;
        Debian)
            SUFFIX="dpkg"
        ;;
        *)
            error "tingle does not recognise your operating system"
        ;;
    esac

    FLAVA="${TINGLE_PREFIX}/lib/tingle/${BASE}-${SUFFIX}"
    if [ -x "$FLAVA" ]; then
        debug "Running ${FLAVA##*/}"
        old_opts="$-"
        set +e
        do_or_die "$FLAVA"
        rv=$?
        if echo "$old_opts" | grep -q e; then
            set -e
        fi
        return "$rv"
    else
        error "Could not execute $FLAVA"
    fi
}

is_interactive() {
    tty -s && test "${TINGLE_NONINTERACTIVE:+x}" != x && \
      return 0
    return 1
}

log_error() {
    logger -p user.err -t "$SYSLOGTAG" -- "$@" || true
}

log_info() {
    logger -t "$SYSLOGTAG" -- "$@" || true
}

log_warning() {
    logger -p user.warn -t "$SYSLOGTAG" -- "$@" || true
}

nuke_tmp() {
    rm -fr "$TMP_DIR"
}

os_flavour() {
    if [ -e /etc/redhat-release ]; then
        if grep -qi centos /etc/redhat-release ; then
            echo "CentOS"
        elif grep -qi scientific /etc/redhat-release ; then
            echo "Scientific"
        else
            echo "RedHat"
        fi
    elif [ -e /etc/debian_version ]; then
        # You're one of those Ubuntu users, are ye?  See bug #19353.
        echo "Debian"
    fi
}

abort_on_killswitch() {
    # All potentially disastrous automated processes need a killswitch
    # within easy reach.
    if [ -f "$KILLSWITCH" ]; then
        abort "Aborting on killswitch.  Remove $KILLSWITCH and try again."
    fi
}

TMP_DIR="$(mktemp -d -t tingle.XXXXXX)"
