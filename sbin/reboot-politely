#!/bin/bash

set -e

. "${TINGLE_PREFIX:=/usr}/lib/tingle/common"

abort_on_killswitch

usage() {
    cat - >&2 <<EOF
Usage: reboot-politely
  (or) reboot-politely MESSAGE
  (or) reboot-politely MINUTES MESSAGE
EOF
    exit_clean 2
}

MINUTES=1

if [ $# -eq 0 ]; then
    MESSAGE="This system will reboot in one minute.

Please save all open work and log out."
elif [ $# -eq 1 ]; then
    if [ "$1" = "-h" -o "$1" = "--help" ]; then
        usage
    fi
    MESSAGE="$1"
elif [ $# -eq 2 ]; then
    MINUTES="$1"
    MESSAGE="$2"
fi

if ! echo "$MINUTES" | egrep -q '^[[:digit:]]+$'; then
    usage
fi

LINK=$(readlink /sbin/shutdown 2>/dev/null || :)
if [ "${LINK##*/}" = "systemctl" ]; then
    do_or_die /sbin/shutdown --reboot "+${MINUTES}" "$MESSAGE"
else
    echo "$MESSAGE" | wall

    # If an atd job is scheduled with timing arguments of `now +1 minutes',
    # it feels like it executes at the next *turn of the minute*, which is
    # almost certainly less than one real minute away.  Adding one `extra'
    # minute will better match expectations.
    MINUTES=$((MINUTES + 1))

    # Do not use shutdown with a large time delay as that would block this
    # program for minutes at a time.  Behaviour like that would grow tiring
    # if you were tingling from Func or MCollective.
    job=$(echo "/sbin/shutdown -fr now" | \
      at now "+${MINUTES}" minutes 2>&1 | \
      awk '/^job/ { print $2; }')

    debug "Reboot pending.  \`atrm ${job}' to abort."
fi

exit_clean 0
